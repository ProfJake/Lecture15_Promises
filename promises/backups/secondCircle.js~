/*Example of how callbacks can get canfusing.
Jake Levy
Credit for code example: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises

The second Circle of Callback hell, made easier through the Promises.

Promises allow us to resolve any failure with the same callback function
*/
var readline=require("readline");


var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout 
});

//orderPizza accepts a pizza and returns a promise
var orderPizza= function(pizza){
    return new Promise( (resolve, reject)=>{
	console.log(`Ordering ${pizza}`);
	resolve(`${pizza}`);
    });
}

//orderToppings accepts a pizza and returns a promise
var orderToppings = function(pizza){
    return new Promise((resolve, reject) => {
	rl.question("are you sure you want a pizza?", resp =>{
	    if (resp.toString().startsWith('y')){
		console.log(`Let\'s order mushrooms`);
		resolve(`Mushroom ${pizza}`);
	    } else{
		reject();
	    }
	});
    });
}
//sideOrders accepts a pizza and returns a promise
var sideOrders = function(pizza){
    return new Promise((resolve, reject)=>{
	rl.question(`Do you want ${pizza}?`, (resp)=>{
	    if (resp.toString().startsWith('y')){
		console.log("lets get wings too!");
		resolve(`${pizza} Pizza and Hot Wings`);
	    }else{
		reject();
	    }
	});
    });
}
//to keep the example short, pay resolves the whole chain
var pay = function (pizza){
    console.log(`${pizza} is too expensive, let\'s just eat crackers`);
    process.exit(0);
}

//failure callback
function failed(){
    console.log("Ordering pizza failed early");
    process.exit(1);
}
orderPizza("Cheese")
    .then( pizza =>  //this is the 'resolve' call back
	   orderToppings(pizza)  //together this means "Order a Pizza"
	   //and when it succeeds, order the toppings
	 )
    .then( pizza =>//and when ordering toppings succeeds
	   sideOrders(pizza)//make side orders
	 )
    .then( pizza => //wehn that succeeds
	   pay(pizza)  //go to pay (But we're too broke!)
	 )
    .catch(failed);

